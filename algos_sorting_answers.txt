1. Write pseudocode for bubble sort.

FUNCTION bubbleSort(collection) {

   REPEAT
      SET swapped = false
   
   FOR (i = 0; i < collection.length; i++) {
      if (collection[i] < collection [i+1]) {
         SET tmp = collection[i];
         SET collection[i] = collection[i+1];
         SET collection[i+1] = temp;
         SET swapped = true
      }
   }

   UNTIL swapped = false

   RETURN collection;

}


2. Write pseudocode for quicksort.

FUNCTION quickSort(collection) {
   IF (collection.length <= 1) {
      RETURN collection
   }

   SET left = [];
   SET right = [];
   SET pivot = collection[collection.length - 1];

   for (let i = (collection.length - 2); i > 0; i--) {
      IF (collection[i] < pivot) {
         ADD collection[i] to left;
      } ELSE {
         ADD collection[i] to right;
      }
   RETURN quickSort(left) + pivot + quickSort(right);
}



3. We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more efficient than the others. Walking through each algorithm with a few sample collections may help.

In quick sort you are only looping through the full array once then using divide and conquer to sort through the remaining data. Time complexity gets smaller for each recursive call of the function making overall time complexity smaller. 

Merge sort uses similar divide and conquer process. The algorithm doesn't need to iterate through the whole collection multiple times because items are sorted in smaller groupings before sorted in the entire collection. This makes sorting through the entire collection at the end take less iterations because it is already mostly sorted.  



4. All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort?

Bucket sort works by distributing the elements of a collection into a number of buckets. These buckets are sorted individually by another sorting algorithm. The sorted buckets are then combined to form the sorted collection. The ideal input for bucket sort is an array in which each item has an index and can be distributed into logical buckets easily. Buckets that are not sorted intelligently may end up causing a lot of extra work. 

