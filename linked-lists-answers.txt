###Exercises


1. What are some pros and cons of using linked lists instead of arrays?

Pros: Linked lists make insertions and deletions less expensive, which is especially useful for large data sets. When you remove, add or insert data, the items in the list do not have to be reindexed because they do not use index values. 

Cons: Since there is no index, you can't select a specific item without iterating through a linked list. Linked lists also don't have all the methods that are readily available in JavaScript.


2. Come up with a real world example of a linked list.

A train with each train car being a node and each connector on the train cars being links to the previous/next node(train car).



### Programming Questions


1. The Linked List push function should take a value, create a node, and add it to the end of a list. Below is a push function for a singly linked list. However, there is something wrong with it. Find the bug and fix the code.


SET node = {
  value: element,
  next: null
}

LinkedList.prototype.push = function(element) {

constructor = {
   head = null;
   tail = null;
}

add(value) {
 IF the head and tail node does not exist
   THEN SET head to node
   AND SET tail to node
 ELSE
   SET current node to head
   SET current.next to node
   SET tail to last node
 }
}





2. Given an unsorted singly linked list, remove all duplicates from the linked list.

Iterate through the linked list. If element to be removed is equal to the node, remove the node, if not, keep the node in the list.


removeDuplicate(element){
   let node = this._head;
   while(node){
     if (node.element === element) {
       REMOVE element;
     }
     node = next node;
   }
   



3. Given an unsorted singly linked list, reverse it.

Iterate through a linked list. While iterating, reverse the direction of the current link.

class LinkedList {

  constructor() {
    this.head = null;
  }

  insertNodeAtTail(value) {
    var node = {
      data: value,
      next: null
    };

    if (!this.head) {
      this.head = node;
    } else {
      var p1 = this.head;
      while (p1.next) {
        p1 = p1.next;
      }
      p1.next = node;
    }
  }


function LinkedList () {
    this.head = null;
}


LinkedList.prototype.reverseLinkedList = function() {

    if (!this.head || !this.head.next) {
       return;
    }

    var p1 = null;
    var p2 = this.head;
    var p3;
   
    while(p2) {
        p3 = p2.next;
        p2.next = p1;
        p1 = p2;
        p2 = p3;
    }

    this.head = p1;
}

var list = new LinkedList();
forEach(element => list.insertNodeAtTail(element));




   


